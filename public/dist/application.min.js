"use strict";var ApplicationConfiguration=function(){var applicationModuleName="workbench",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ngTable","ui.router","mwl.calendar","ui.bootstrap","ui.utils","formly","formlyBootstrap"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("categories",["core"]),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("events",["core"]),ApplicationConfiguration.registerModule("files",["core"]),ApplicationConfiguration.registerModule("projects",["core"]),ApplicationConfiguration.registerModule("tasks",["core","ui.bootstrap"]),ApplicationConfiguration.registerModule("users"),angular.module("categories").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Categories","categories","dropdown","/categories(/create)?"),Menus.addSubMenuItem("topbar","categories","List Categories","categories"),Menus.addSubMenuItem("topbar","categories","New Category","categories/create")}]),angular.module("categories").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCategories",{url:"/categories",templateUrl:"modules/categories/views/list-categories.client.view.html"}).state("createCategory",{url:"/categories/create",templateUrl:"modules/categories/views/create-category.client.view.html"}).state("viewCategory",{url:"/categories/:categoryId",templateUrl:"modules/categories/views/view-category.client.view.html"}).state("editCategory",{url:"/categories/:categoryId/edit",templateUrl:"modules/categories/views/edit-category.client.view.html"})}]),angular.module("categories").controller("CategoriesController",["$scope","$stateParams","$location","Authentication","Categories","TableSettings","CategoriesForm",function($scope,$stateParams,$location,Authentication,Categories,TableSettings,CategoriesForm){$scope.authentication=Authentication,$scope.tableParams=TableSettings.getParams(Categories),$scope.category={},$scope.setFormFields=function(disabled){$scope.formFields=CategoriesForm.getFormFields(disabled)},$scope.create=function(){var category=new Categories($scope.category);category.$save(function(response){$location.path("categories/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(category){category?category=Categories.get({categoryId:category._id},function(){category.$remove(),$scope.tableParams.reload()}):$scope.category.$remove(function(){$location.path("categories")})},$scope.update=function(){var category=$scope.category;category.$update(function(){$location.path("categories/"+category._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.toViewCategory=function(){$scope.category=Categories.get({categoryId:$stateParams.categoryId}),$scope.setFormFields(!0)},$scope.toEditCategory=function(){$scope.category=Categories.get({categoryId:$stateParams.categoryId}),$scope.setFormFields(!1)}}]),angular.module("categories").factory("Categories",["$resource",function($resource){return $resource("categories/:categoryId",{categoryId:"@_id"},{update:{method:"PUT"}})}]),function(){function factory(){var getFormFields=function(disabled){var fields=[{key:"name",type:"input",templateOptions:{label:"Name:",disabled:disabled}}];return fields},service={getFormFields:getFormFields};return service}angular.module("categories").factory("CategoriesForm",factory)}(),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").directive("ngReallyClick",["$modal",function($modal){var ModalInstanceCtrl=["$scope","$modalInstance",function($scope,$modalInstance){$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}];return{restrict:"A",scope:{ngReallyClick:"&"},link:function(scope,element,attrs){element.bind("click",function(){var message=attrs.ngReallyMessage||"Are you sure ?",modalHtml='<div class="modal-body">'+message+"</div>";modalHtml+='<div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button><button class="btn btn-warning" ng-click="cancel()">Cancel</button></div>';var modalInstance=$modal.open({template:modalHtml,controller:ModalInstanceCtrl});modalInstance.result.then(function(){scope.ngReallyClick()},function(){})})}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),function(){angular.module("core").factory("TableSettings",["NgTableParams",function(NgTableParams){var getData=function(Entity){return function($defer,params){Entity.get(params.url(),function(response){params.total(response.total),$defer.resolve(response.results)})}},params={page:1,count:5},settings={total:0,counts:[5,10,15],filterDelay:0},getParams=function(Entity){var tableParams=new NgTableParams(params,settings);return tableParams.settings({getData:getData(Entity)}),tableParams},service={getParams:getParams};return service}])}(),angular.module("events").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Events","events","dropdown","/events(/create)?"),Menus.addSubMenuItem("topbar","events","List Events","events"),Menus.addSubMenuItem("topbar","events","New Event","events/create")}]),angular.module("events").config(["$stateProvider",function($stateProvider){$stateProvider.state("listEvents",{url:"/events",templateUrl:"modules/events/views/list-events.client.view.html"}).state("createEvent",{url:"/events/create",templateUrl:"modules/events/views/create-event.client.view.html"}).state("viewEvent",{url:"/events/:eventId",templateUrl:"modules/events/views/view-event.client.view.html"}).state("editEvent",{url:"/events/:eventId/edit",templateUrl:"modules/events/views/edit-event.client.view.html"})}]),angular.module("events").controller("EventsController",["$scope","$stateParams","$location","Authentication","Events","TableSettings","EventsForm",function($scope,$stateParams,$location,Authentication,Events,TableSettings,EventsForm){$scope.authentication=Authentication,$scope.tableParams=TableSettings.getParams(Events),$scope.event={},$scope.setFormFields=function(disabled){$scope.formFields=EventsForm.getFormFields(disabled)},$scope.create=function(){var event=new Events($scope.event);event.$save(function(response){$location.path("events/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(event){event?event=Events.get({eventId:event._id},function(){event.$remove(),$scope.tableParams.reload()}):$scope.event.$remove(function(){$location.path("events")})},$scope.update=function(){var event=$scope.event;event.$update(function(){$location.path("events/"+event._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.toViewEvent=function(){$scope.event=Events.get({eventId:$stateParams.eventId}),$scope.setFormFields(!0)},$scope.toEditEvent=function(){$scope.event=Events.get({eventId:$stateParams.eventId}),$scope.setFormFields(!1)}}]),angular.module("events").factory("Events",["$resource",function($resource){return $resource("events/:eventId",{eventId:"@_id"},{update:{method:"PUT"}})}]),function(){function factory(){var getFormFields=function(disabled){var fields=[{key:"name",type:"input",templateOptions:{label:"Name:",disabled:disabled}}];return fields},service={getFormFields:getFormFields};return service}angular.module("events").factory("EventsForm",factory)}(),angular.module("files").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Files","files","dropdown","/files(/create)?"),Menus.addSubMenuItem("topbar","files","List Files","files"),Menus.addSubMenuItem("topbar","files","New File","files/create")}]),angular.module("files").config(["$stateProvider",function($stateProvider){$stateProvider.state("listFiles",{url:"/files",templateUrl:"modules/files/views/list-files.client.view.html"}).state("createFile",{url:"/files/create",templateUrl:"modules/files/views/create-file.client.view.html"}).state("viewFile",{url:"/files/:fileId",templateUrl:"modules/files/views/view-file.client.view.html"}).state("editFile",{url:"/files/:fileId/edit",templateUrl:"modules/files/views/edit-file.client.view.html"})}]),angular.module("files").controller("FilesController",["$scope","$stateParams","$location","Authentication","Files","TableSettings","FilesForm",function($scope,$stateParams,$location,Authentication,Files,TableSettings,FilesForm){$scope.authentication=Authentication,$scope.tableParams=TableSettings.getParams(Files),$scope.file={},$scope.setFormFields=function(disabled){$scope.formFields=FilesForm.getFormFields(disabled)},$scope.create=function(){var file=new Files($scope.file);file.$save(function(response){$location.path("files/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(file){file?file=Files.get({fileId:file._id},function(){file.$remove(),$scope.tableParams.reload()}):$scope.file.$remove(function(){$location.path("files")})},$scope.update=function(){var file=$scope.file;file.$update(function(){$location.path("files/"+file._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.toViewFile=function(){$scope.file=Files.get({fileId:$stateParams.fileId}),$scope.setFormFields(!0)},$scope.toEditFile=function(){$scope.file=Files.get({fileId:$stateParams.fileId}),$scope.setFormFields(!1)}}]),angular.module("files").factory("Files",["$resource",function($resource){return $resource("files/:fileId",{fileId:"@_id"},{update:{method:"PUT"}})}]),function(){function factory(){var getFormFields=function(disabled){var fields=[{key:"name",type:"input",templateOptions:{label:"Name:",disabled:disabled}}];return fields},service={getFormFields:getFormFields};return service}angular.module("files").factory("FilesForm",factory)}(),angular.module("projects").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Projects","projects","dropdown","/projects(/create)?"),Menus.addSubMenuItem("topbar","projects","List Projects","projects"),Menus.addSubMenuItem("topbar","projects","New Project","projects/create")}]),angular.module("projects").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProjects",{url:"/projects",templateUrl:"modules/projects/views/list-projects.client.view.html"}).state("createProject",{url:"/projects/create",templateUrl:"modules/projects/views/create-project.client.view.html"}).state("viewProject",{url:"/projects/:projectId",templateUrl:"modules/projects/views/view-project.client.view.html"}).state("editProject",{url:"/projects/:projectId/edit",templateUrl:"modules/projects/views/edit-project.client.view.html"})}]),angular.module("projects").controller("ProjectsController",["$scope","$stateParams","$location","Authentication","Projects","TableSettings","ProjectsForm",function($scope,$stateParams,$location,Authentication,Projects,TableSettings,ProjectsForm){$scope.authentication=Authentication,$scope.tableParams=TableSettings.getParams(Projects),$scope.project={},$scope.setFormFields=function(disabled){$scope.formFields=ProjectsForm.getFormFields(disabled)},$scope.create=function(){var project=new Projects($scope.project);project.$save(function(response){$location.path("projects/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(project){project?project=Projects.get({projectId:project._id},function(){project.$remove(),$scope.tableParams.reload()}):$scope.project.$remove(function(){$location.path("projects")})},$scope.update=function(){var project=$scope.project;project.$update(function(){$location.path("projects/"+project._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.toViewProject=function(){$scope.project=Projects.get({projectId:$stateParams.projectId}),$scope.setFormFields(!0)},$scope.toEditProject=function(){$scope.project=Projects.get({projectId:$stateParams.projectId}),$scope.setFormFields(!1)}}]),angular.module("projects").factory("Projects",["$resource",function($resource){return $resource("projects/:projectId",{projectId:"@_id"},{update:{method:"PUT"}})}]),function(){function factory(){var getFormFields=function(disabled){var fields=[{key:"name",type:"input",templateOptions:{label:"Name:",disabled:disabled}}];return fields},service={getFormFields:getFormFields};return service}angular.module("projects").factory("ProjectsForm",factory)}(),angular.module("tasks").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Tasks","tasks","dropdown","/tasks(/create)?"),Menus.addSubMenuItem("topbar","tasks","List Tasks","tasks"),Menus.addSubMenuItem("topbar","tasks","New Task","tasks/create")}]),angular.module("tasks").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTasks",{url:"/tasks",templateUrl:"modules/tasks/views/list-tasks.client.view.html"}).state("createTask",{url:"/tasks/create",templateUrl:"modules/tasks/views/create-task.client.view.html"}).state("viewTask",{url:"/tasks/:taskId",templateUrl:"modules/tasks/views/view-task.client.view.html"}).state("editTask",{url:"/tasks/:taskId/edit",templateUrl:"modules/tasks/views/edit-task.client.view.html"})}]),angular.module("tasks").controller("TasksController",["$scope","$stateParams","$location","Authentication","Tasks","TableSettings","TasksForm","Users","Projects","Categories",function($scope,$stateParams,$location,Authentication,Tasks,TableSettings,TasksForm,Users,Projects,Categories){$scope.authentication=Authentication,$scope.tableParams=TableSettings.getParams(Tasks),$scope.task={},$scope.userOptions=Users.query(),$scope.projectOptions=Projects.query(),$scope.categoryOptions=Categories.query(),$scope.setFormFields=function(disabled){$scope.formFields=TasksForm.getFormFields(disabled,$scope.userOptions,$scope.projectOptions,$scope.categoryOptions)},$scope.create=function(){var task=new Tasks($scope.task);task.$save(function(response){$location.path("tasks/"+response._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(task){task?task=Tasks.get({taskId:task._id},function(){task.$remove(),$scope.tableParams.reload()}):$scope.task.$remove(function(){$location.path("tasks")})},$scope.update=function(){var task=$scope.task;task.$update(function(){$location.path("tasks/"+task._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.toViewTask=function(){$scope.task=Tasks.get({taskId:$stateParams.taskId}),$scope.setFormFields(!0)},$scope.toEditTask=function(){$scope.task=Tasks.get({taskId:$stateParams.taskId}),$scope.setFormFields(!1)}}]),angular.module("tasks").factory("Tasks",["$resource",function($resource){return $resource("tasks/:taskId",{taskId:"@_id"},{update:{method:"PUT"}})}]),function(){function factory(){var getFormFields=function(disabled,userOptions,projectOptions,categoryOptions){var fields=[{key:"name",type:"input",templateOptions:{label:"Name:",disabled:disabled}},{key:"description",type:"textarea",templateOptions:{label:"Description:",disabled:disabled}},{key:"assignee",type:"select",templateOptions:{label:"Aassignee",labelProp:"displayName",valueProp:"_id",options:userOptions,disabled:disabled}},{key:"watcher",type:"select",templateOptions:{label:"Watcher",labelProp:"displayName",valueProp:"_id",options:userOptions,disabled:disabled}},{key:"project",type:"select",templateOptions:{label:"Project",labelProp:"name",valueProp:"_id",options:projectOptions,disabled:disabled}},{key:"category",type:"select",templateOptions:{label:"Category",labelProp:"name",valueProp:"_id",options:categoryOptions,disabled:disabled}}];return fields},service={getFormFields:getFormFields};return service}angular.module("tasks").factory("TasksForm",factory)}(),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);